"use strict";

        // 1 и 2 задание
// 1. Создать HTML-страницу. Вывести «Привет, Javascript!» c помощью alert и с помощью console.log() и посмотреть, куда во втором случае выводится информация.
// 2. Создать HTML-страницу, подключить к ней внешний файл alert.js, расположенный в этой же директории. В этом js-файле вывести любое сообщение в alert и убедиться, что это работает.
alert("Привет, JavaScript!"); //вывод в модальном окне
console.log("Привет, JavaScript!"); //вывод в косоли разработчика в браузере на вкладке Console




        //3 задание
// Создать переменную для названия нашего университета. Выбрать правильное имя переменной и в её значение записать "ННГУ".
let univerName = "ННГУ";




        //4 задание
// Создать две переменные student и teacher. Присвоить переменной student значение "Игорь". Скопировать значение из student в teacher. Вывести в alert teacher.
let student = "Игорь";
let teacher = student;//получим скопированное значение и в случае его замены (до объявления переменной teacher), произойдет замена и в teacher
    alert(teacher);




        //5 задание
// Создать 6 переменных, содержащих в себе различные типы данных: number, string, boolean, null, undefined и object. Применить оператор typeof к каждой переменной и вывести результат с помощью alert.
let someNum = 47;
    alert (typeof someNum);//number

let someText = "Morning!";
    alert (typeof someText);//string

let logic = true;
    alert (typeof logic);//boolean

let zero = null;
    alert (typeof zero);//null, но покажет object

let x;
    alert (typeof x);//undefined

let someObject = {
    name:"John",
    surname:"Wick",
    hobby: "dogs",
};
    alert (typeof someObject);//object




        //6 задание
// Самостоятельно разобраться с атрибутами тэга <script>: async и defer. Объяснить это в коде с помощью комментариев.

/* <script async src=""></script> - аттрибут async указывает на то, что скрипт будет грузиться ассинхронно с файлом Html. Используется для ускорения загрузки страниц, ибо загрузка Html приостанавливается на время загрузки и исполнения скрипта. В случае использования async, Html грузится параллельно без остановок, но при выполнении скрипта, загрузка Html все равно приостанавливается. В нашем примере у нас 7 вызовов скрипта alert и если бы это был полноценный сайт, то без указания async пользователь долго бы смотрел на пустой экран с выплывающими модальными окнами.

<script defer src=""></script> - аттрибут defer указывает на то, что  скрипт хоть и может быть загружен, но выполняться он будет только после полной загрузки Html. Так как у нас в Html нет контента, нет смысла указывать defer, но если бы было существенное наполнение, то указание этого аттрибута могло бы быть осмысленным.

Логично использовать данные аттрибуты в том случае, если скрипт подключается в <head>, а не под конец <body>. Если же скрипт находится именно в конце <body>, то файл Html и так уже полностью загрузился и смысла от использования данных аттрибутов нет. */



